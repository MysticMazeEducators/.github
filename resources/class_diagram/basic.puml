@startuml

left to right direction
skinparam dpi 700
skinparam linetype ortho
page 2x2
skinparam pageMargin 10

set namespaceSeparator ::

class common::Identifier{
  -id: int
  -alreadyUsed: Set<int> {static}
  --
}

class common::Context<p extends Entity, t extends Entity>{
  -position: Room
  -parent: p
  -target: t
}

interface common::Timed{
  +processTick(): boolean
}

class common::Entity{
  -id: Identifier
}

class common::Room{
  -inventory: Inventory
  -playerList: List of Human
  -doorList: List of Door
  -getDoorsAction: GetDoorsAction = DGetDoorsAction
  -enterActions: ActionQueue<EnterAction>
  --
  +getDoors(): List of Door
  +enter(context: Context): boolean
  +leave(context: Context): boolean
}

Timed <|-- Room

class common::Map{
  -roomList: List of Room
  --
  +getRoom(id: int): Room
  +getRoomList(): List of Room
}

Timed <|-- Map
Entity <|-- Map
Room "1..*" --* "1" Map

class common::Minimap{
  -roomList: List of Room
  --
  +getRoomList(): List of Room
  +refreshRoomState(id: int): boolean
}

Entity <|-- Minimap
Minimap - Map

abstract class common::Human{
  -position: Room
  -inventory: Inventory
  -stunned: boolean
  -stunDuration: int
  -stunAction: ActionQueue<StunAction>
  -killActions: ActionQueue<KillAction>
  -minimap: Minimap
  __
  +move(): boolean
  +useItem(): boolean
  +pickUpItem(): boolean
  +dropItem(): boolean
  +dropAllItems(): boolean
  +changeRoom(room: Room): boolean
  +stun(): boolean
  +kill(): boolean
}

Timed <|-- Human
Human "1" *-- "1" Minimap

class common::human::Student{
  +processTick(): boolean
  +processUserInput(): boolean
}

class common::human::Teacher{
  +processTick(): boolean
}

Teacher - Map

abstract class common::Item<u extends UseAction, pu extends PickupAction, pd extends PutdownAction, tp extends TickProcessor>{
  -useAction: u
  -pickUpAction: pu
  -putDownAction: pd
  -tickProcessor: tp
  __
  +pickUp(context: Context<Human, Item>): boolean
  +putDown(context: Context<Human, Item>): boolean
  +use(context: Context<Human, Item>): boolean
  +processTick(): boolean
}

Timed <|-- Item

class common::Door{
  -target: Room
  --
  +open(context: Context): boolean
}

class common::Inventory{
  -maxSize: int
  -container: List of Item
  --
  +transferItems(context: Context, ids: List of Identifier): boolean
  +sendInventoryList(): List of Item
  +selectItem(): Identifier
}

class common::Timer{
  +tick()
}

interface actions::Action{
  --
  +execute(context: Context): boolean {abstract}
}

class actions::ActionQueue<e extends OrderedAction>{
  -queue: queue of e
  --
  +addAction(action: Action): boolean
  +execute(context: Context): boolean
  +executeAll(context: Context): boolean
  +removeFirst(): boolean
  +remove(action: Action): boolean
}

Room "1" *-- "1" ActionQueue
Human "1" *-- "2" ActionQueue

class actions::OrderedAction{
  -priority: int
  --
  +CompareTo(other: OrderedAction): int
}

ActionQueue "1" *-- "1..*" OrderedAction

Action <|-- OrderedAction

interface actions::item::ItemAction
interface actions::room::RoomAction
interface actions::human::HumanAction

Action <|-- ItemAction
Action <|-- RoomAction
Action <|-- HumanAction

interface actions::item::UseAction
interface actions::item::PickupAction
interface actions::item::PutdownAction
interface actions::item::TickProcessor

ItemAction <|-- UseAction
ItemAction <|-- PickupAction
ItemAction <|-- PutdownAction
ItemAction <|-- TickProcessor

abstract class actions::room::EnterAction
interface actions::room::GetDoorsAction

RoomAction <|-- EnterAction
OrderedAction <|-- EnterAction
RoomAction <|-- GetDoorsAction

abstract class actions::human::KillAction
abstract class actions::human::StunAction

HumanAction <|-- KillAction
OrderedAction <|-- KillAction
HumanAction <|-- StunAction
OrderedAction <|-- StunAction

'Item actions
class actions::item::TransistorAction {
  -pair: Item
  -on: boolean
  --
  +execute(context: Context): boolean
}

class actions::item::CamambertAction {
  -duration: int = 3
  -on: boolean
  --
  +execute(context: Context): boolean
}

class actions::item::TVSZAction {
  -duration: int = 3
  --
  +execute(context: Context): boolean
}

class actions::item::BeerGlassAction {
  -duration: int = 3
  -on: boolean
  --
  +execute(context: Context): boolean
}

class actions::item::MaskAction {
  -duration: int = 3
  -on: boolean
  --
  +execute(context: Context): boolean
}

class actions::item::ClothAction {
  -duration: int = 2
  -on: boolean
  --
  +execute(context: Context): boolean
}

class actions::item::SlipstickAction {
  --
  +execute(context: Context): boolean
}

class actions::item::decreaseDurationAction {
  __
  +execute(context: Context): boolean
}

TickProcessor <|-- decreaseDurationAction

class actions::item::dTickProcessor {
  __
  +execute(context: Context): boolean
}

TickProcessor <|-- dTickProcessor

UseAction <|-- TransistorAction
PutdownAction <|-- TransistorAction
PutdownAction <|-- CamambertAction
PickupAction <|-- TVSZAction
UseAction <|-- BeerGlassAction
UseAction <|-- MaskAction
PutdownAction <|-- ClothAction
PickupAction <|-- SlipstickAction

EnterAction <|-- ClothAction
EnterAction <|-- CamambertAction

KillAction <|-- TVSZAction
KillAction <|-- BeerGlassAction
StunAction <|-- MaskAction

'Room modifiers
class actions::room::GhostDoorsAction{
  -duration: int
  --
  +execute(context: Context): boolean
}

class actions::room::TeacherPresentAction{
  teacher: Teacher
  --
  +execute(context: Context): boolean
}

GetDoorsAction <|-- GhostDoorsAction
EnterAction <|-- TeacherPresentAction
Teacher "1" --o "1" TeacherPresentAction

'Default actions

class actions::human::DKillAction{
  --
  +execute(context: Context): boolean
}

class actions::human::DStunAction{
  --
  +execute(context: Context): boolean
}

KillAction <|-- DKillAction
StunAction <|-- DStunAction

class actions::room::DEnterAction{
  --
  +execute(context: Context): boolean
}

class actions::room::DGetDoorsAction{
  --
  +execute(context: Context): boolean
}

GetDoorsAction <|-- DGetDoorsAction
EnterAction <|-- DEnterAction

class actions::item::DPickupAction{
  --
  +execute(context: Context): boolean
}

class actions::item::DPutdownAction{
  --
  +execute(context: Context): boolean
}

PickupAction <|-- DPickupAction
PutdownAction <|-- DPutdownAction

Entity "1" *-- "1" Identifier
Entity <|-- Human
Entity <|-- Item
Entity <|-- Room
Entity <|-- Door
Human <|-- Student
Human <|-- Teacher
Inventory "1" --* "1" Human
Inventory "1" --* "1" Room
Item "0..n" --* "1" Inventory
Door "1" o-- "1" Room
Room "1" *-- "1..*" Door
Human "1" --o "1" Room
Context "1" --o "1" Room
Context "1" --o "2" Entity


'Connect the actions
Item "1" *-- "1" UseAction
Item "1" *-- "1" PickupAction
Item "1" *-- "1" PutdownAction
Item "1" *-- "1" TickProcessor

Room "1" *-- "1..*" EnterAction: > child
Room "1" *-- "1" GetDoorsAction: > child

Human "1" *-- "1..*" KillAction: > child
Human "1" *-- "1..*" StunAction: > child

Timed - Timer

@enduml